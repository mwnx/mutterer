# A neat(ish) way of dealing with mailing lists using mutt only.
#
# To set it up, add 'lists' fields to your account, e.g.
#
#     [account John]
#     name = John Doe
#     ...
#     lists.Mutt = mutt-dev@mutt.org mutt-users@mutt.org \
#                  "=h\ 'List-Id:\ <mutt-users.mutt.org>'"
#     lists.SECURITY = debian-security-announce@lists.debian.org
#     lists.Haskell = haskell-cafe@haskell.org \
#                     '[Haskell-cafe]'
#
# This will automatically setup a shortcut (",A" by default) to filter
# John's inbox; this shortcut has no effect when used from an account with
# no lists.* configured.
# A mailing list can be matched by either the list's email address (e.g.
# "mutt-dev@mutt.org"), a tag that appears in the subject line, specified in
# the form '[tag]' (e.g. "[Haskell-cafe]"), or any mutt "pattern modifier"
# with spaces escaped (e.g. "=h\ 'List-Id:\ <mutt-users.mutt.org>'", which
# tests the "List-Id:" header field).
# Notice how we use two addresses and a pattern for "Mutt". If any of these
# matches, the email will be considered as belonging to the mailing list.
# A hook will also be setup to automatically call this shortcut when
# entering the user's inbox (so there will rarely be any need to use the
# aforementioned ",A" shortcut at all).
#
# Messages belonging to a mailing list are saved in %folder/list_name (e.g.
# John/Mutt). They are deleted from the inbox unless they are part of a
# thread to which the user has participated.
#
# Depends on: box (see defaults)
#
# Optional: mutt.mark_old, list_filter_shortcut

:. $MUTTERER_SYSTEM_PRESETS/lib

# list_move_with_expr folder expr
:list_move_with_expr()
:{
:    local folder=$1 expr=$2
:    echo -n "<untag-pattern><kill-line>~A<enter>"
:    echo -n "<tag-pattern><kill-line>~N $expr ~(~P)<enter>"
:    echo -n "<tag-prefix-cond><copy-message><kill-line>$folder<enter>y<end-cond>"
:    echo -n "<untag-pattern><kill-line>~A<enter>"
:    echo -n "<tag-pattern><kill-line>~N $expr !~(~P)<enter>"
:    echo -n "<tag-prefix-cond><save-message><kill-line>$folder<enter>y<end-cond>"
:}

# read_words words > newline-separated words
:read_words()
:{
:    local words
:    read -a words <<< "$1"
:    printf '%s\n' "${words[@]}"
:}

# extract_patterns words > '|'-separated patterns (starting with '|')
:extract_patterns()
:{
:    read_words "$1" |
:    sed -n -e "s/^\[.*\]$/~s '^\0'/" -e "s/^[~=%(]/| \0/p"
:}

# extract_addresses words
:extract_addresses()
:{
:    read_words "$1" |
:    grep -v '^\[.*\]$\|^[~=%(]' |
:    tr '\n' ' '
:}

# list_move_macro %id %box
:list_move_macro()
:{
:    local id=$1 box=$2 k
:    while read -r k; do
:        [[ "$k" =~ ^accounts\.$id\.lists\.([a-zA-Z0-9_-]+)$ ]] || continue
:        local list=${BASH_REMATCH[1]}
:        mkdir -p "$box/$list"/{cur,new,tmp}
:        local patterns=$(extract_patterns "${settings[$k]}")
:        list_move_with_expr "=$id/$list" "(%L $list $patterns)"
:    done < <(keys_for_account "$id")
:    echo -n "<tag-pattern><kill-line>~N<enter>"
:    echo -n "<tag-prefix-cond><set-flag>O<end-cond>"
:    echo -n "<untag-pattern><kill-line>~A<enter>"
:}

# list_subs %id
:list_subs()
:{
:    local id=$1 k
:    while read -r k; do
:        [[ "$k" =~ ^accounts\.$id\.lists\.([a-zA-Z0-9_-]+)$ ]] || continue
:        local list=${BASH_REMATCH[1]}
:        local addrs=$(extract_addresses "${settings[$k]}")
:        if [[ -n "$addrs" ]]; then
:            printf '%s\n\n' "$list $addrs"
:        fi
:    done < <(keys_for_account "$id")
:}

# accounts_using_lists
:accounts_using_lists()
:{
:    printf '%s\n' "${!settings[@]}" |
:    grep -o '^accounts\.[a-zA-Z0-9_]\+\.lists\.[a-zA-Z0-9_-]\+$' |
:    sed 's/^accounts\.\([a-zA-Z0-9_]\+\)\..*$/\1/' |
:    sort -u
:}

:accounts_not_using_lists()
:{
:    all_accounts_except $(accounts_using_lists)
:}

[groups]
using_lists     = $(accounts_using_lists)
not_using_lists = $(accounts_not_using_lists)

[accounts ${!accounts[@]}]
list_filter_shortcut ?= ,A

[accounts %using_lists]
MUTT.subscribe -group = "$(list_subs "%id")"
mutt.macro index ,,,l = \"$(list_move_macro "%id" "%box")\"
#TODO: escape special characters (folder-hook expects a regex)
MUTT.'folder-hook ' += $([[ %{mutt.mark_old:-} == no ]] ||\
                         printn "\"%{box}/\"/*" set mark_old)
MUTT.'folder-hook ' += %{mutt.spoolfile} unset mark_old
MUTT.'folder-hook ' += %{mutt.spoolfile} push ,,,l
mutt.macro index %list_filter_shortcut ?= "\"<enter-command><kill-line>push ,,,l<enter>\""

[accounts %not_using_lists]
mutt.bind index %list_filter_shortcut ?= noop
mutt.mark_old                         ?= yes
